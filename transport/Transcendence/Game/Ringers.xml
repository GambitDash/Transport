<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<!-- Ringers Collective -->

	<StationType UNID="&stRingersCollective;"
			name=				"Ringers Collective"
			sovereign=			"&svIndependent;"
			dockScreen=			"Main"
			abandonedScreen=	"&dsAbandonedStation;"
			canAttack=			"true"

			multiHull=			"true"
			armorID=			"&itDiamondLatticeArmor;"
			maxHitPoints=		"850"
			hitPoints=			"850"
			repairRate=			"10"
			fireRateAdj=		"10"
			explosionType=		"&vtPlasmaExplosion1;"
			ejectaType=			"&vtWreckEjecta;"

			attributes=			"independent,friendly,envEarth,envAvoidsAir,populated"
			levelFrequency=		"----- rcurv ----- ----- -----"
			locationCriteria=	"+ringedgiant,-InnerSystem,-void"
			>

		<Image			imageID="&rsStations6;" imageX="0" imageY="256" imageWidth="160" imageHeight="192"/>

		<Ships>
			<Table count="1d4">
				<Ship chance="50"	count="1" class="&scCenturion;" orders="gateOnThreat" />
				<Ship chance="15"	count="1" class="&scEI500;" orders="gateOnThreat"/>
				<Ship chance="10"	count="1" class="&scWolfen;" orders="gateOnThreat"/>
				<Ship chance="25"	count="1" class="&scFerianMiner;" orders="gateOnThreat"/>
			</Table>
		</Ships>

		<Devices>
			<Device deviceID="&itAresArchcannon;" omnidirectional="true" posAngle="0" posRadius="40"/>
			<Device deviceID="&itAresArchcannon;" omnidirectional="true" posAngle="120" posRadius="40"/>
			<Device deviceID="&itAresArchcannon;" omnidirectional="true" posAngle="240" posRadius="40"/>
		</Devices>

		<Items>
			<RandomItem count="1d12" 
					criteria=		"* +Meds; -Illegal; -NotForSale;"
					level=			"6"
					levelCurve=		"2"
					/>

			<RandomItem count="1d4" 
					criteria=		"w -NotForSale;"
					level=			"8"
					levelCurve=		"2"
					/>

			<RandomItem count="1d4" 
					criteria=		"d~w -NotForSale;"
					level=			"7"
					levelCurve=		"2"
					/>

			<RandomItem count="1d8" 
					criteria=		"a -NotForSale;"
					level=			"9"
					levelCurve=		"1"
					/>

			<RandomItem count="1d4" 
					criteria=		"u -NotForSale;"
					level=			"7"
					levelCurve=		"2"
					/>

			<RandomItem count="2d12" 
					criteria=		"f -NotForSale;"
					level=			"7"
					levelCurve=		"2"
					/>

			<Item				count="4d12"	item="&itEuropanIceMoss;" />
			<Item				count="1d12"	item="&itEuropanIceVodka;" />

			<Item chance="25"	count="1"		item="&itGemOfDespair;" />
			<Item chance="25"	count="1"		item="&itGemOfContrition;" />
			
			<Item chance="50"	count="1"		item="&itPlasmaTorch;" />
		</Items>

		<Reinforcements minShips="3">
			<Table count="1d4">
				<Ship chance="50"	count="1" class="&scCenturion;" orders="gateOnThreat" />
				<Ship chance="25"	count="1" class="&scFerianMiner;" orders="gateOnThreat"/>
				<Ship chance="15"	count="1" class="&scEI500;" orders="gateOnThreat"/>
				<Ship chance="10"	count="1" class="&scWolfen;" orders="gateOnThreat"/>
			</Table>
		</Reinforcements>

		<Events>
			<OnDestroy>
				(intRingerOnDestroy)
			</OnDestroy>
		</Events>
		
		<DockScreens>
			<Main
				name=			"=(objGetName gSource)"
				>

				<OnInit>
					(intRingerOnInit "Main")
				</OnInit>
					
				<Panes>
					<Default
							desc=	"You are docked at a Ringers Collective. Ringer neo-humans float through the vast volume of the station, perfectly adapted to zero-gravity and space.">

						<Actions>
							<Action name="Exchange" default="1" key="E">
								(if (objGetData gPlayerShip "rins")
									(scrShowPane gScreen "Exchange")
									(scrShowPane gScreen "ExchangeIntro")
									)
							</Action>

							<Action name="Undock" cancel="1" key="U">
								<Exit/>
							</Action>

						</Actions>

					</Default>

					<Exchange
							desc=	"The central structure of the Ringers Collective is a large marketplace containing sophisticated and rare devices from all over Human Space. Commonwealth credits are not accepted here.">

						<Actions>
							<Action name="Buy items" default="1" key="B">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "Exchange")
									(setq gMargin Nil)
									(scrShowScreen gScreen "&dsRingerBuy;")
									)
							</Action>

							<Action name="Sell items" key="S">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "Exchange")
									(setq gMargin Nil)
									(scrShowScreen gScreen "&dsRingerSell;")
									)
							</Action>

							<Action name="Done" cancel="1" key="D">
								<ShowPane pane="Default"/>
							</Action>

						</Actions>
					</Exchange>

					<ExchangeIntro
							desc=	"As you enter the main Exchange, a greeter scans you and says, &quot;Earthican, welcome. Your account balance at 0 rin. Continue and browse, but Collective not accepts Commonwealth credits. Collective seeks rare and powerful ores and substances. Bring here.&quot;">

						<Actions>
							<Action name="Continue" cancel="1" default="1" key="C">
								(block Nil
									(objSetData gPlayerShip "rins" 0)
									(scrShowPane gScreen "Exchange")
									)
							</Action>

						</Actions>
					</ExchangeIntro>

				</Panes>
			</Main>

		</DockScreens>

		<DockingPorts>
			<Port x="66"	y="94" />
			<Port x="-66"	y="94" />
			<Port x="107"	y="30" />
			<Port x="-107"	y="30" />
			<Port x="86"	y="-34" />
			<Port x="-86"	y="-34" />
			<Port x="39"	y="-72" />
			<Port x="-39"	y="-72" />
		</DockingPorts>

	</StationType>

	<!-- Ringer Shipyard -->

	<StationType UNID="&stRingerShipyard;"
			name=				"Ringer Shipyard"
			sovereign=			"&svIndependent;"
			dockScreen=			"Main"
			abandonedScreen=	"&dsAbandonedStation;"
			canAttack=			"true"

			multiHull=			"true"
			armorID=			"&itDiamondLatticeArmor;"
			maxHitPoints=		"850"
			hitPoints=			"850"
			repairRate=			"10"
			fireRateAdj=		"10"
			explosionType=		"&vtPlasmaExplosion2;"
			ejectaType=			"&vtWreckEjecta;"

			attributes=			"independent,friendly,envEarth,envAvoidsAir,populated"
			levelFrequency=		"----- -ruur ----- ----- -----"
			locationCriteria=	"+ringedgiant,-InnerSystem,-void"
			>

		<Image			imageID="&rsStations7;" imageX="0" imageY="1024" imageWidth="256" imageHeight="256"/>

		<Ships>
			<Table count="1d4">
				<Ship chance="50"	count="1" class="&scCenturion;" orders="gateOnThreat" />
				<Ship chance="15"	count="1" class="&scEI500;" orders="gateOnThreat"/>
				<Ship chance="10"	count="1" class="&scWolfen;" orders="gateOnThreat"/>
				<Ship chance="25"	count="1" class="&scFerianMiner;" orders="gateOnThreat"/>
			</Table>
		</Ships>

		<Devices>
			<Device deviceID="&itAresArchcannon;" omnidirectional="true" posAngle="0" posRadius="40"/>
			<Device deviceID="&itAresArchcannon;" omnidirectional="true" posAngle="120" posRadius="40"/>
			<Device deviceID="&itAresArchcannon;" omnidirectional="true" posAngle="240" posRadius="40"/>
		</Devices>

		<Items>
			<RandomItem count="1d4" 
					criteria=		"w -NotForSale;"
					level=			"8"
					levelCurve=		"2"
					/>

			<RandomItem count="1d8" 
					criteria=		"d~w -NotForSale;"
					level=			"7"
					levelCurve=		"2"
					/>

			<RandomItem count="1d8" 
					criteria=		"a -NotForSale;"
					level=			"9"
					levelCurve=		"1"
					/>

			<RandomItem count="4d12" 
					criteria=		"f -NotForSale;"
					level=			"7"
					levelCurve=		"2"
					/>

			<Item				count="1"		item="&itPlasmaTorch;" />
		</Items>

		<Reinforcements minShips="3">
			<Table count="1d4">
				<Ship chance="50"	count="1" class="&scCenturion;" orders="gateOnThreat" />
				<Ship chance="25"	count="1" class="&scFerianMiner;" orders="gateOnThreat"/>
				<Ship chance="15"	count="1" class="&scEI500;" orders="gateOnThreat"/>
				<Ship chance="10"	count="1" class="&scWolfen;" orders="gateOnThreat"/>
			</Table>
		</Reinforcements>

		<Events>
			<OnDestroy>
				(intRingerOnDestroy)
			</OnDestroy>
		</Events>
		
		<DockScreens>
			<Main
				name=			"=(objGetName gSource)"
				>

				<OnInit>
					(intRingerOnInit "Main")
				</OnInit>
					
				<Panes>
					<Default
							desc=	"You are docked at a Ringer Shipyard. Ringer neo-humans float through the vast volume of the station, perfectly adapted to zero-gravity and space.">

						<Actions>
							<Action name="Exchange" default="1" key="E">
								(if (objGetData gPlayerShip "rins")
									(scrShowPane gScreen "Exchange")
									(scrShowPane gScreen "ExchangeIntro")
									)
							</Action>

							<Action name="Dock Services" default="1" key="D">
								(if (objGetData gPlayerShip "rins")
									(scrShowPane gScreen "DockServices")
									(scrShowPane gScreen "DockServicesGreeter")
									)
							</Action>

							<Action name="Undock" cancel="1" key="U">
								<Exit/>
							</Action>

						</Actions>
					</Default>
						
					<Exchange
							desc=	"The central structure of the Ringer Shipyard is a large marketplace containing sophisticated and rare devices from all over Human Space. Commonwealth credits are not accepted here.">

						<Actions>
							<Action name="Buy items" default="1" key="B">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "Exchange")
									(setq gMargin Nil)
									(scrShowScreen gScreen "&dsRingerBuy;")
									)
							</Action>

							<Action name="Sell items" key="S">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "Exchange")
									(setq gMargin Nil)
									(scrShowScreen gScreen "&dsRingerSell;")
									)
							</Action>

							<Action name="Done" cancel="1" key="D">
								<ShowPane pane="Default"/>
							</Action>

						</Actions>
					</Exchange>

					<DockServices
							desc=	"You are at the docking services terminal.">
							
						<Actions>
							<Action name="Refuel" key="R">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "DockServices")
									
									; If the player ship can use pteracnium, then 
									; use that. Otherwise, use helium assemblies
									
									(setq gItem (itmCreate &itPteracniumFuelRod; 1))
									(if (shpIsFuelCompatible gPlayerShip gItem)
										(setq gCost 50)
										(block Nil
											(setq gItem (itmCreate &itHeliumAssembly; 1))
											(setq gCost 15)
											)
										)
										
									(scrShowScreen gScreen "&dsRingerRefuel;")
									)
							</Action>
								
							<Action name="Repair or replace armor" key="A">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "DockServices")
									(setq gTechLevel 12)
									(setq gArmorSegment 0)
									(setq gMargin 100)
									(scrShowScreen gScreen "&dsRingerRepairArmor;")
									)
							</Action>
								
							<Action name="Install device" key="D">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "DockServices")
									(setq gTechLevel 10)
									(setq gTechModifier Nil)
									(setq gCheckMilitaryID Nil)
									(setq gMargin 100)
									(scrShowScreen gScreen "&dsRingerInstallDevice;")
									)
							</Action>
								
							<Action name="Remove device" key="V">
								(block Nil
									(setq gPrevScreen "Main")
									(setq gPrevPane "DockServices")
									(setq gMargin 100)
									(scrShowScreen gScreen "&dsRingerRemoveDevice;")
									)
							</Action>
								
							<Action name="Upgrade reactor" key="P">
								(block (maxPower)
									(setq gPrevScreen "Main")
									(setq gPrevPane "DockServices")
									(setq gCheckMilitaryID Nil)
									
									; Figure out what reactor to upgrade to
									(setq maxPower (objGetMaxPower gPlayerShip))
									
									(switch
										(ls maxPower 2500)
											(block Nil
												(setq gCost 12000)
												(setq gItem (itmCreate &it250MWReactor; 1))
												)

										(ls maxPower 5000)
											(block Nil
												(setq gCost 20000)
												(setq gItem (itmCreate &it500MWReactor; 1))
												)

										(ls maxPower 10000)
											(block Nil
												(setq gCost 40000)
												(setq gItem (itmCreate &it1GWReactor; 1))
												)
												
										(setq gItem Nil)
										)
										
									; Install screen
									(if gItem
										(scrShowScreen gScreen "&dsRingerInstallSpecificDevice;")
										(scrShowPane gScreen "NoReactorUpgrade")
										)
									)
							</Action>
								
							<Action name="Done" key="N" cancel="1">
								<ShowPane pane="Default"/>
							</Action>
						</Actions>
					</DockServices>
						
					<ExchangeIntro
							desc=	"As you enter the main Exchange, a greeter scans you and says, &quot;Earthican, welcome. Your account balance at 0 rin. Continue and browse, but Collective not accepts Commonwealth credits. Collective seeks rare and powerful ores and substances. Bring here.&quot;">

						<Actions>
							<Action name="Continue" cancel="1" default="1" key="C">
								(block Nil
									(objSetData gPlayerShip "rins" 0)
									(scrShowPane gScreen "Exchange")
									)
							</Action>

						</Actions>
					</ExchangeIntro>
						
					<DockServicesGreeter
							desc=	"As you enter the shipyard, a greeter scans you and says, &quot;Earthican, welcome. Your account balance at 0 rin. Continue and observe, but Collective not accepts Commonwealth money.&quot;">

						<Actions>
							<Action name="Continue" cancel="1" default="1" key="C">
								(block Nil
									(objSetData gPlayerShip "rins" 0)
									(scrShowPane gScreen "DockServices")
									)
							</Action>

						</Actions>
					</DockServicesGreeter>
						
					<NoReactorUpgrade
							desc=	"The technology required to upgrade your reactor is not available at this station.">
							
						<Actions>
							<Action name="Continue" key="C" default="1" cancel="1">
								<ShowPane pane="DockServices"/>
							</Action>
						</Actions>
					</NoReactorUpgrade>

				</Panes>
			</Main>

		</DockScreens>

		<DockingPorts>
			<Port x="0"		y="128" />
			<Port x="90"	y="100" />
			<Port x="-90"	y="100" />
			<Port x="140"	y="30" />
			<Port x="-140"	y="30" />
			<Port x="140"	y="-70" />
			<Port x="-140"	y="-70" />
			<Port x="58"	y="-138" />
			<Port x="-58"	y="-138" />
		</DockingPorts>

	</StationType>

	<Globals>
		(block Nil
			(setq intRingerBuyMargin (lambda (thisItem)
				(block (cost)
					(switch
						; We charge extra for Promethium crystals, etc.
						(itmHasModifier thisItem "RingerValuable")
							(setq cost (divide (multiply 110 (itmGetPrice thisItem)) 100))

						; Otherwise, convert to rins
						(setq cost (divide (itmGetPrice thisItem) 5))
						)

					; round up
					(setq cost (multiply (divide (add cost 4) 5) 5))
					
					(if (gr cost 0)
						cost
						Nil
						)
					)
				))
				
			(setq intRingerSellMargin (lambda (thisItem)
				(block (cost)
					(switch
						; Better not be installed
						(itmIsInstalled thisItem)
							(setq cost 0)
						
						; We pay extra for Promethium crystals, etc.
						(itmHasModifier thisItem "RingerValuable")
							(setq cost (itmGetPrice thisItem))

						; We buy high-level resources
						(and (itmHasModifier thisItem "Res")
								(geq (itmGetLevel thisItem) 4))
							(setq cost (divide (itmGetPrice thisItem) 5))

						; Otherwise, no sale
						(setq cost 0)
						)

					; Unknown items are discounted
					(if (not (itmIsKnown thisItem))
						(setq cost (divide cost 10))
						)
						
					(if (gr cost 0)
						cost
						Nil
						)
					)
				))

			(setq intRingerCrime (lambda (severity description)
				(if (gr severity (int (objGetData gPlayerShip "ringerCrimeSeverity")))
					(block Nil
						(objSetData gPlayerShip "ringerCrimeSeverity" severity)
						(objSetData gPlayerShip "ringerCrime" description)
						)
					)
				))
				
			(setq intRingerInstallDevicePrep (lambda (thisItem costToInstall isItemInCargo)
				(block (desc rins cargoNeeded)
					(setq gCanInstall Nil)
					(setq rins (objGetData gPlayerShip "rins"))
					
					(setq desc (cat "Balance: " rins " rin\n\n"))
					
					(if thisItem
						(block Nil
							(if costToInstall
								(setq gCost costToInstall)
								(block Nil
									(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 500))
									
									; Weapons cost twice as much to install
									(if (eq (itmGetCategory thisItem) 4)
										(setq gCost (multiply gCost 2))
										)
									)
								)
							
							; See if we can install
							(setq gResult (shpCanInstallDevice gPlayerShip thisItem))
							(setq gCriteria Nil)

							(switch
								; If we don't have the technology, we cannot install
								; (except for specific items that we know about)
								(and (gr (itmGetLevel thisItem) gTechLevel)
										(or (not gTechModifier)
											(not (itmHasModifier thisItem gTechModifier)))
										)
									(setq desc (cat desc "We do not have the technology to install " (itmGetName thisItem 4) " on your ship."))
									
								(and gCheckMilitaryID 
										(itmHasModifier thisItem "Military")
										(not (objGetItems gPlayerShip "*+MilitaryID"))
										)
									(setq desc (cat desc "You must have a military ID to to use " (itmGetName thisItem 4) "."))
									
								(eq gResult 2)
									(setq desc (cat desc "Your ship cannot support any more devices."))
									
								(eq gResult 4)
									(block Nil
										(setq desc (cat desc "We can replace your shield generator with " (itmGetName thisItem 4)))
										(setq gCriteria "sI")
										(setq gCanInstall True)
										)

								(eq gResult 5)
									(block Nil
										(setq desc (cat desc "We can replace your propulsion system with " (itmGetName thisItem 4)))
										(setq gCriteria "vI")
										(setq gCanInstall True)
										)

								(eq gResult 6)
									(block Nil
										(setq desc (cat desc "We can replace your missile launcher with " (itmGetName thisItem 4)))
										(setq gCriteria "lI")
										(setq gCanInstall True)
										)

								(eq gResult 7)
									(setq desc (cat desc "Your ship's reactor is not powerful enough for this device."))

								(eq gResult 8)
									(setq desc (cat desc "You already have a cargo expansion system installed."))
									
								(eq gResult 9)
									(block Nil
										(setq desc (cat desc "We can replace your reactor with " (itmGetName thisItem 4)))
										(setq gCriteria "rI")
										(setq gCanInstall True)
										)

								(eq gResult 10)
									(setq desc (cat desc "The cargo expansion system is too large to be installed in your ship."))

								(eq gResult 11)
									(setq desc (cat desc "The power output of " (itmGetName thisItem 4) " is too high for your ship."))

								(eq gResult 12)
									(setq desc (cat desc "Your ship cannot support any more weapons."))
									
								(eq gResult 13)
									(setq desc (cat desc "Your ship cannot support any more non-weapon devices."))
									
								(not (eq gResult 0))
									(setq desc (cat desc "This device cannot be installed."))

								(block Nil
									(setq desc (cat desc "We can install " (itmGetName thisItem 4) " on your ship"))
									(setq gCanInstall True)
									)
								)
								
							; If we have to uninstall an item, then it will cost more
							
							(setq cargoNeeded 0)
							(if (and gCriteria gCanInstall)
								(objEnumItems gPlayerShip gCriteria itemToRemove
									(block Nil
										(if (not costToInstall)
											(setq gCost (add gCost (divide (multiply gMargin (itmGetInstallCost itemToRemove)) 1000)))
											)

										(setq cargoNeeded (itmGetMass itemToRemove))
										(if isItemInCargo
											(setq cargoNeeded (subtract cargoNeeded (itmGetMass thisItem)))
											)
										)
									)
								)
								
							; See if the item fits
							
							(if gCanInstall
								(if (gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
									(block Nil
										(scrSetDesc gScreen (cat desc ". Unfortunately, there isn't enough room in your cargo hold to do the swap."))
										(setq gCanInstall Nil)
										)
									)
								)
								
							; See if we can afford the installation
							
							(if gCanInstall
								(if (gr gCost 0)
									(if (gr gCost rins)
										(block Nil
											(scrSetDesc gScreen (cat desc " for " gCost " rin. Unfortunately, you cannot afford the cost."))
											(setq gCanInstall Nil)
											)
										(scrSetDesc gScreen (cat desc " for " gCost " rin."))
										)
									(scrSetDesc gScreen (cat desc " at no charge."))
									)
								(scrSetDesc gScreen desc)
								)
							)
						(scrSetDesc gScreen (cat desc "You do not have any devices that can be installed."))
						)
					)
				))
				
			(setq intRingerOnDestroy (lambda Nil
				(block Nil
					; Destroy items on the station
					(intDestroyItems gSource)
					
					; Ringer crime
					(if (eq (objGetOrderGiver aDestroyer aDestroyReason) gPlayerShip)
						(intRingerCrime 3 (cat "the destruction of " (objGetName gSource 4)))
						)
					)
				))
				
			(setq intRingerOnInit (lambda (prevScreen)
				(block Nil
					(setq gPrevScreen prevScreen)

					(switch
						; If the player has deviated socially, she is frozen
						(geq (int (objGetData gPlayerShip "ringerCrimeSeverity")) 2)
							(scrShowScreen gScreen "&dsRingerImprison;")
						)
					)
				))
			)
	</Globals>

	<!-- Ringer Buy
	
		gPrevScreen, gPrevPane: Must be set to the name/UNID of the screen/pane
				to navigate to when done.
		gMargin: Function that calculate the value of an item
				
		-->

	<DockScreen UNID="&dsRingerBuy;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"station"
			list=		"*"
			>
			(if (isfunction gMargin)
				(scrSetListFilter gScreen gMargin)
				(scrSetListFilter gScreen "*NU -Res; -RingerValuable;")
				)
		</ListOptions>

		<Panes>
			<Default
					desc=			"There are no items here.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (affordCount availCount desc fitCount rins)

								(setq rins (objGetData gPlayerShip "rins"))
								
								; Compute the cost of the item the exchange rate
								; is at 5 credits per rin
								(if (isfunction gMargin)
									(setq gCost (apply gMargin thisItem Nil))
									(setq gCost (intRingerBuyMargin thisItem))
									)

								(setq availCount (itmGetCount thisItem))

								(if (gr gCost 0)
									(setq affordCount (divide rins gCost))
									(setq affordCount 0)
									)
								(setq gMaxCount (if (gr affordCount availCount) availCount affordCount))

								(setq fitCount (divide (objGetCargoSpaceLeft gPlayerShip) (itmGetMass thisItem)))
								(setq gMaxCount (if (gr gMaxCount fitCount) fitCount gMaxCount))

								; Set the price and description
								(setq desc (cat "Balance: " rins " rin"))
								(setq desc (cat desc "\nUnit price: " (if (eq gCost 0) "N/A" (cat gCost " rin"))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " for " (multiply gCost gMaxCount) ")"))
									)

								(setq desc (cat desc "\nUnit mass: " (intMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (intMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(setq desc (cat desc "\n\n"))

								(switch
									(eq gCost 0)
										(setq desc (cat desc "This item is not for sale."))
									(eq affordCount 0)
										(setq desc (cat desc "You do not have enough rin to purchase any."))
									(eq fitCount 0)
										(setq desc (cat desc "Unfortunately, you cannot fit any in your cargo hold."))
									(and (gr availCount affordCount) (gr fitCount affordCount))
										(setq desc (cat desc "You have enough rin to buy " affordCount "."))
									(and (gr availCount fitCount))
										(setq desc (cat desc "You have enough room in your cargo hold to carry " fitCount "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</Initialize>

				<Actions>
					<Action name="Buy this item" default="1" key="B">
						(if (gr gMaxCount 1)
							(scrShowPane gScreen "BuyQuantity")
							(if (eq gMaxCount 1)
								(block Nil
									(setq itemsToBuy (scrRemoveItem gScreen 1))
									(objAddItem gPlayerShip itemsToBuy)
									(objIncData gPlayerShip "rins" (subtract 0 gCost))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

			<BuyQuantity
					showCounter=	"true">

				<Initialize>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to purchase at " gCost " rin each?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</Initialize>

				<Actions>
					<Action name="Buy" default="1" key="B">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block Nil
									(setq itemsToBuy (scrRemoveItem gScreen count))
									(objAddItem gPlayerShip itemsToBuy)
									(objIncData gPlayerShip "rins" (subtract 0 (multiply count gCost)))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</BuyQuantity>
		</Panes>

	</DockScreen>

	<!-- Ringer Sell
	
		gPrevScreen, gPrevPane: Must be set to the name/UNID of the screen/pane
				to navigate to when done.
		gMargin: Function to compute price
				
		-->

	<DockScreen UNID="&dsRingerSell;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*"
			>
			(if (isfunction gMargin)
				(scrSetListFilter gScreen gMargin)
				(scrSetListFilter gScreen intRingerSellMargin)
				)
		</ListOptions>

		<Panes>
			<Default
					desc=			"There are no items here.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (affordCount availCount desc priceText rins)
								(setq rins (objGetData gPlayerShip "rins"))

								; Compute the cost
								(if (isfunction gMargin)
									(setq gCost (apply gMargin thisItem Nil))
									(setq gCost (intRingerSellMargin thisItem))
									)

								(setq availCount (itmGetCount thisItem))
								(setq gMaxCount availCount)

								; Set the price and description
								(setq priceText (cat "Balance: " rins " rin"))
								(if (gr gCost 0)
									(block Nil
										(setq priceText (cat priceText "\nUnit offer: " (if (eq gCost 0) "N/A" (cat gCost " rin"))))
										(if (gr availCount 1)
											(setq priceText (cat priceText " (" availCount " for " (multiply gCost availCount) ")"))
											)

										(setq priceText (cat priceText "\nUnit mass: " (intMassString (itmGetMass thisItem))))
										(if (gr availCount 1)
											(setq priceText (cat priceText " (" availCount " at " (intMassString (multiply (itmGetMass thisItem) availCount)) ")"))
											)
										)
									)

								(setq priceText (cat priceText "\n\n"))

								(switch
									(eq gCost 0)
										(setq desc (cat priceText "The Collective is not interested in buying " (itmGetName thisItem 2) "."))
									(eq availCount 1)
										(setq desc (cat priceText "The Collective offers " gCost " rin for your " (itmGetName thisItem 0) "."))
									(setq desc (cat priceText "The Collective offers " gCost " rin for each " (itmGetName thisItem 0) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (and (gr gCost 0) (gr gMaxCount 0)))
						)
				</Initialize>

				<Actions>
					<Action name="Sell this item" default="1" key="S">
						(if (gr gCost 0)
							(if (gr gMaxCount 1)
								(scrShowPane gScreen "SellQuantity")
								(if (eq gMaxCount 1)
									(block (itemsToSell)
										(setq itemsToSell (scrRemoveItem gScreen 1))
										(objAddItem gSource itemsToSell)
										(objIncData gPlayerShip "rins" gCost)
										(scrShowPane gScreen "Default")
										)
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

			<SellQuantity
					showCounter=	"true">

				<Initialize>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to sell at " gCost " rin each?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</Initialize>

				<Actions>
					<Action name="Sell" default="1" key="S">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToSell)
									(setq itemsToSell (scrRemoveItem gScreen count))
									(objAddItem gSource itemsToSell)
									(objIncData gPlayerShip "rins" (multiply count gCost))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</SellQuantity>
		</Panes>

	</DockScreen>
		
	<!-- Ringer Refuel
		
		gPrevScreen, gPrevPane: Must be set to the name/UNID of the screen/pane to
				navigate to when done.
		gCost: This is the cost of one fuel rod (in rins)
		gItem: Fuel item to refuel with

		-->

	<DockScreen UNID="&dsRingerRefuel;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default
					showCounter=	"true">

				<Initialize>
					(block (desc maxAfford rins)
						(setq rins (objGetData gPlayerShip "rins"))
						(setq gMaxCount (shpGetFuelNeeded gPlayerShip gItem))
						(setq maxAfford (divide rins gCost))
						
						; Set the description
						
						(setq desc (cat "Balance: " rins " rin"))
						(setq desc (cat desc "\nUnit price: " (if (eq gCost 0) "N/A" (cat gCost " rin"))))
						(if (gr gMaxCount 1)
							(setq desc (cat desc " (" gMaxCount " for " (multiply gCost gMaxCount) ")"))
							)
						
						(setq desc (cat desc "\n\n"))
						
						; Figure out how much we need/can afford
						
						(switch
							(not (shpIsFuelCompatible gPlayerShip gItem))
								(block Nil
									(setq gMaxCount 0)
									(setq desc (cat desc "This refueling facility uses " (itmGetName gItem 2) ", which are not compatible with your ship's reactor."))
									)
							
							(geq maxAfford gMaxCount)
								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "You ship is does not need any fuel."))
									(eq gMaxCount 1)
										(setq desc (cat desc "Your ship needs one " (itmGetName gItem 0) " to refuel for a total cost of " gCost " rin."))
									(setq desc (cat desc "Your ship needs " gMaxCount " " (itmGetName gItem 2) " to refuel. Each " (itmGetName gItem 0) " costs " gCost " rin (" (multiply gCost gMaxCount) " rin total). How many do you wish to buy?"))
									)
									
							(block Nil
								(setq gMaxCount maxAfford)
								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "You cannot afford to refuel your ship."))
									(eq gMaxCount 1)
										(setq desc (cat desc "Each " (itmGetName gItem 0) " costs " gCost " rin. You can only afford a single one."))
									(setq desc (cat desc "Each " (itmGetName gItem 0) " costs " gCost " rin. You can only afford " gMaxCount " " (itmGetName gItem 2) ". How many do you wish to buy?"))
									)
								)
							)
							
						(scrSetDesc gScreen desc)
						(scrSetCounter gScreen gMaxCount)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</Initialize>

				<Actions>
					<Action name="Refuel" default="1" key="R">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToUse)
									(setq itemsToUse (itmCreate (itmGetUNID gItem) count))
									(shpRefuelFromItem gPlayerShip itemsToUse)
									(objIncData gPlayerShip "rins" (subtract 0 (multiply count gCost)))
									(scrShowScreen gScreen gPrevScreen gPrevPane)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>
		</Panes>
	</DockScreen>

	<!-- Ringer Repair armor 

		gPrevScreen: Previous screen
		gPrevPane: Previous pane
		gTechLevel: Tech level at which armor is repaired
		gArmorSegment: Armor segment being repaired/replaced (0-3)
		gMargin: Cost multiplies (100 = no adjustment; <100 = discount; >100 = surcharge)
	
	-->

	<DockScreen UNID="&dsRingerRepairArmor;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aI"

			initialItem="=(eq (itmGetArmorInstalledLocation (scrGetItem gScreen)) gArmorSegment)"
			/>

		<Panes>

			<Default
					desc=	"">

				<Initialize>
					(block (type damage desc rins)
						(setq gArmorSegment (itmGetArmorInstalledLocation (scrGetItem gScreen)))
						(setq type (objGetArmorType gPlayerShip gArmorSegment))
						(setq damage (objGetArmorDamage gPlayerShip gArmorSegment))
						(setq maxHP (shpGetArmorMaxHitPoints gPlayerShip gArmorSegment))
						(setq gCanRepair True)
						(setq gCost (multiply damage (armGetRepairCost type)))
						(setq gCost (divide (multiply gMargin gCost) 500))
						(setq gCost (if (eq gCost 0) 1 gCost))
						(setq rins (objGetData gPlayerShip "rins"))
						
						(setq desc (cat "Balance: " rins " rin\n\n"))
						(setq desc (cat desc "The ship's " (objGetArmorName gPlayerShip gArmorSegment) " " (armGetName type)))

						(switch
							(eq damage 0)
								(block Nil
									(setq desc (cat desc " is not damaged."))
									(setq gCanRepair Nil)
									)
							(gr (armGetRepairTech type) gTechLevel)
								(block Nil
									(setq desc (cat desc " cannot be repaired. The technology required is not available to the Ringers."))
									(setq gCanRepair Nil)
									)
							(ls rins gCost)
								(block Nil
									(setq desc (cat desc " can be repaired for " gCost " rin, which, unfortunately, is more than you can afford."))
									(setq gCanRepair Nil)
									)
							(eq gCost 0)
								(setq desc (cat desc " is damaged and can be repaired free of charge."))
								
							(setq desc (cat desc " is damaged and will cost " gCost " rin to repair."))
							)
						(scrSetDesc gScreen desc)

						; Disable actions if we cannot repair
						(scrEnableAction gScreen 0 gCanRepair)
						)
				</Initialize>

				<Actions>
					<Action name="Repair" key="R" >
						(if gCanRepair
							(block Nil
								(objRepairArmor gPlayerShip gArmorSegment)
								(objIncData gPlayerShip "rins" (subtract 0 gCost))
								(scrShowPane gScreen "Default")
								)
							)
					</Action>

					<Action name="Replace" key="P" >
						(scrShowScreen gScreen "&dsRingerReplaceArmor;")
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Replace armor screen -->

	<DockScreen UNID="&dsRingerReplaceArmor;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			/>

		<Panes>
			<Default
					desc=	"Pick an armor segment to install.">

				<Initialize>
					(block (thisItem canInstall rins desc)
						(setq thisItem (scrGetItem gScreen))
						(setq canInstall True)
						(setq rins (objGetData gPlayerShip "rins"))
						
						(setq desc (cat "Balance: " rins " rin\n\n"))
						
						(if thisItem
							(block (cargoNeeded)
								(setq gResult (shpCanInstallArmor gPlayerShip thisItem))
								(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 500))
								(setq cargoNeeded (subtract (itmGetMass (shpGetArmor gPlayerShip gArmorSegment)) (itmGetMass thisItem)))

								(switch
									(eq gResult 1)
										(block Nil
											(setq desc (cat (itmGetName thisItem 3) " is too heavy for your ship's hull."))
											(setq canInstall Nil)
											)
											
									(not (eq gResult 0))
										(block Nil
											(setq desc "This armor segment cannot be installed.")
											(setq canInstall Nil)
											)
										
									(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(setq desc "There is no room in your cargo hold to store the old armor segment.")
											(setq canInstall Nil)
											)
										
									(gr gCost rins)
										(block Nil
											(setq desc (cat desc "This armor segment can be installed for " gCost " rin. Unfortunately, you cannot afford this cost."))
											(setq canInstall Nil)
											)

									(eq gCost 0)
										(setq desc (cat desc "This armor segment can be installed free of charge."))

									(setq desc (cat desc "This armor segment can be installed for " gCost " rin."))
									)

								(scrSetDesc gScreen desc)
								)

							(block Nil
								(scrSetDesc gScreen (cat desc "You do not have any armor segments in your cargo hold."))
								(setq canInstall Nil)
								)
							)

						(scrEnableAction gScreen 0 canInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Install this armor" default="1" key="I" >
						(block (thisItem)
							(setq thisItem (scrGetItem gScreen))

							(if (and thisItem (geq (plyGetCredits gPlayer) gCost))
								(block Nil
									(shpInstallArmor gPlayerShip (scrGetItem gScreen) gArmorSegment)
									(objIncData gPlayerShip "rins" (subtract 0 gCost))
									(scrShowScreen gScreen "&dsRingerRepairArmor;")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<Navigate screen="&dsRingerRepairArmor;"/>
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Install device screen

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gTechLevel: Tech level at which station installs
		gTechModifier: Can install if item has given modifier
		gCheckMilitaryID: If True, this screen does not allow installing
				military weapons without an ID
		gMargin: Surcharge/discount percent
	-->

	<DockScreen UNID="&dsRingerInstallDevice;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"dUN"
			/>

		<Panes>
			<Default
					desc=	"Pick a device to install.">

				<Initialize>
					(block Nil
						(intRingerInstallDevicePrep (scrGetItem gScreen) Nil True)
						
						; Disable actions
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Install this device" default="1" key="I">
						(if gCanInstall
							(block Nil
								(shpInstallDevice gPlayerShip (scrGetItem gScreen))
								(objIncData gPlayerShip "rins" (subtract 0 gCost))
								(scrShowScreen gScreen gPrevScreen gPrevPane)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Remove device screen -->

	<DockScreen UNID="&dsRingerRemoveDevice;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"dI"
			/>

		<Panes>
			<Default
					desc=	"Pick a device to remove.">

				<Initialize>
					(block (thisItem desc)
						(setq thisItem (scrGetItem gScreen))
						(setq rins (objGetData gPlayerShip "rins"))
						
						(setq desc (cat "Balance: " rins " rin\n\n"))
						
						(if thisItem
							(block Nil
								(setq gResult (shpCanRemoveDevice gPlayerShip thisItem))
								
								; Half the price of install cost
								(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 1000))

								(switch
									(eq gResult 1)
										(block Nil
											(scrSetDesc gScreen "Your ship has too much cargo to be able to remove the cargo expansion.")
											(setq thisItem Nil)
											)
											
									(not (eq gResult 0))
										(block Nil
											(scrSetDesc gScreen "The device cannot be removed.")
											(setq thisItem Nil)
											)
										
									(gr (itmGetMass thisItem) (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(scrSetDesc gScreen "This device cannot be removed because there is no room in your cargo hold to store it.")
											(setq thisItem Nil)
											)
									
									(ls rins gCost)
										(scrSetDesc gScreen (cat desc "This device can be removed from your ship for " gCost " rin. Unfortunately, you cannot afford the cost."))

									(eq gCost 0)
										(scrSetDesc gScreen (cat desc "This device can be removed from your ship free of charge."))

									(scrSetDesc gScreen
										(cat desc "This device can be removed from your ship for " gCost " rin.")
										)
									)
								)
							(scrSetDesc gScreen desc "You do not have any devices that can be removed.")
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0
							(and thisItem (geq rins gCost))
							)
						)
				</Initialize>

				<Actions>
					<Action name="Remove this device" default="1" key="R">
						(block (dsDryDock thisItem)
							(setq thisItem (scrGetItem gScreen))

							(if (and thisItem (geq (objGetData gPlayerShip "rins") gCost))
								(block Nil
									(shpRemoveDevice gPlayerShip (scrGetItem gScreen))
									(objIncData gPlayerShip "rins" (subtract 0 gCost))
									(scrShowScreen gScreen gPrevScreen gPrevPane)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Install a specific device

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gItem: Item to install
		gCost: Cost of installation
		gCheckMilitaryID: If True, this screen does not allow installing
				military weapons without an ID
	-->

	<DockScreen UNID="&dsRingerInstallSpecificDevice;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default>

				<Initialize>
					(block (desc okToInstall)
						(setq gTechLevel 25)
						(setq gTechModifier Nil)
						(intRingerInstallDevicePrep gItem gCost Nil)
						
						; Enable/disable buttons
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Install this device" default="1" key="I">
						(if gCanInstall
							(block Nil
								; Install the new items
								(objAddItem gPlayerShip gItem)
								(shpInstallDevice gPlayerShip gItem)
								(objIncData gPlayerShip "rins" (subtract 0 gCost))

								(setq gResult True)
								(scrShowScreen gScreen gPrevScreen gPrevPane)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(block Nil
							(setq gResult Nil)
							(scrShowScreen gScreen gPrevScreen gPrevPane)
							)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Imprison -->

	<DockScreen UNID="&dsRingerImprison;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default>

				<Initialize>
					(block Nil
						(scrSetDesc gScreen (cat "As you enter the station you are surrounded by warrior ringers. A ringer dressed in blue approaches you: \"For " (objGetData gPlayerShip "ringerCrime") " you will be made safe in frozen confinement.\"" ))
						(plyDestroyed gPlayer (cat "cryofrozen by the Ringers for " (objGetData gPlayerShip "ringerCrime")))
						)
				</Initialize>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						(scrExitDock gScreen)
					</Action>
				</Actions>

			</Default>
		</Panes>

	</DockScreen>
		
</TranscendenceModule>
